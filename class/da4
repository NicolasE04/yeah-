#include <avr/io.h>
#include <stdlib.h>
#define F_CPU 16000000UL
#include <util/delay.h>
#include <avr/interrupt.h>
#define BAUDRATE 9600
#define BAUD_PRESCALLER (((F_CPU / (BAUDRATE * 16UL))) - 1)

uint16_t adc_value;            //Variable used to store the value read from the ADC
char buffer[10];                //Output of the itoa function

//usart

void USART_init(void){
	
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
	UCSR0C = (3<<UCSZ00);
}

void USART_send( unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = data;
	
}

void USART_putstring(char* StringPtr){
	
	while(*StringPtr != 0x00){
		USART_send(*StringPtr);
	StringPtr++;}
	
}


//adc

void InitADC()
{
	// Select Vref and set right adjust result
	ADMUX |= (1 << REFS0);
	//set presale to 128, enable autotriggering, enable ADC interrupt
	//and enable ADC
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1<<ADPS0) | (1 << ADATE) | (1 << ADIE) | (1 << ADEN);
	//set ADC trigger source - Timer0 compare match A
	ADCSRB |= (1 << ADTS1) | (1 << ADTS0);
}

void SetADCChannel(uint8_t ADCchannel)
{
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
}

// timer0
void InitTimer0(void)
{
	//Set Initial Timer value
	TCNT0 = 0;
	//Place TOP timer value to Output compare register
	OCR0A = 156;
	//Set CTC mode
	TCCR0A |= (1 << WGM01);
	//Set prescaller 8 and start timer
	TCCR0B |= (1 << CS02) | (1 << CS00);
}



int main(void){

	InitADC();
	//initialize ADC
	//select ADC channel
	SetADCChannel(0);
	//Setup the USART
	USART_init();
	//initialize timer0
	InitTimer0();
	//enable global interrupts
	sei();
	while (1) {}
	
	return 0;
}

//ADC conversion complete ISR
ISR(ADC_vect)
{
    TIFR0 = (1 << OCF0A); // Clear timer compare match flag
    adc_value = ADCL;
    adc_value |= (ADCH << 8); // Read 0 ADC channel (proper combining)

    // Convert ADC value to voltage
    float voltage = ((float)adc_value / 1023.0) * 1.1;

    // Format voltage into a string
    char voltage_buffer[10];
    dtostrf(voltage, 4, 2, voltage_buffer); // width=4, 2 decimal places

    USART_putstring(voltage_buffer);
    USART_putstring(" V\n"); // Add unit
	
}
